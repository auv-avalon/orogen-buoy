name "buoy"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "buoy_detectorType.hpp"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
using_library "opencv"
#using_library "eigen2"
using_library "frame_helper"
using_library "visual_detectors"
import_types_from "base"
import_types_from "visual_detectors/Types.hpp"
import_types_from "SonarDetectorTaskTypes.hpp"
import_types_from "auv_control"
task_context "Survey" do
   # --------------------------------------------------------------------------
   # BUOY_DETECTED:   found a buoy within a sequence of frames
   # BUOY_LOST:       lost the buoy over a sequence of frames
   # --------------------------------------------------------------------------
   states("BUOY_SEARCH", "BUOY_DETECTED", "BUOY_LOST", "RE_SEARCHING_BUOY", "BUOY_ARRIVED", "STRAFING", 
        "STRAFE_FINISHED", "STRAFE_ERROR", "MOVING_TO_CUTTING_DISTANCE", "CUTTING",
        "CUTTING_SUCCESS", "CUTTING_ERROR", "STRAFE_TO_ANGLE", "ANGLE_ARRIVED")

   # --------------------------------------------------------------------------
   # I n p u t s 
   # --------------------------------------------------------------------------
   input_port("orientation_samples", "base::samples::RigidBodyState").
		doc 'Vehicle orientation with depth'

   input_port("force_cutting", "bool").
		doc("if true the task will direktly go tu STRAFE_FINISHED-state")

   input_port("input_buoy", "/avalon/feature/Buoy").
        doc("feature data of a buoy with the highest probability in frame")

   input_port("motion_command", "/base/AUVMotionCommand").
        doc("motion command submitted by nurc for surveying a specific yaw/z to buoy")

   input_port("light", "bool").
		doc("input-port, must be connected to detector.light")

   input_port("target_angle_input", "double").
		doc("if u submit a value to the task, it will automatically try to reach this heading while surrounding the buoy")

   # --------------------------------------------------------------------------
   # O u t p u t s
   # --------------------------------------------------------------------------
   output_port("strafed_angle", "double").
		doc("the angle that was strafed in pi...")

   output_port("relative_position", "/base/AUVPositionCommand").
        doc("relative position of the buoy in frame")

   output_port("position", "/base/samples/RigidBodyState").
        doc("outputs current yaw and z-depth during buoy survey")

   # --------------------------------------------------------------------------
   # P r o p e r t i e s 
   # --------------------------------------------------------------------------

   property("max_buoy_distance", "double", 2.0).
        doc("maximum buoy distance in m")
 
   property("strafe_intensity", "double", -0.8).
        doc("intensity and direction of strafing (negative is right).")

   property("steps", "int", 5).
        doc("Step size to detect V value.")

   property("lost_timeout", "int", 20).
        doc("timeout how long it takes to change state from RE_SEARCHING_BUOY to BUOY_LOST.")

   property("good_y_z", "double", 0.2).
        doc("for detecting if the buoy is in a good position to strafe.")
   
   property("good_x", "double", 0.3).
        doc("for detecting if the buoy is in a good position to strafe.")

   property("buoy_depth", "double", -1.0).
        doc("the absolute high of the buoy in the water.")

   property("headingFactor", "double", 1.0).
        doc("factor multiplied for heading")

   property("headingModulation", "double", 0.0).
        doc("pre-heading for strafing")

   property("maxX", "double", 0.2).
        doc("maximum x value for strafing")

   property("cutting_time", "int", 53).
        doc("time for the cutting-action in seconds.")

   property("cutting_hight", "double", -0.25).
        doc("how much higher should he go to cut the buoy.")

   property("strafe_angle", "double", 0.95).
	doc("the angle that is to strafe around the buoy and bagwards. it has to be 0<x<1, where the angle is x*pi where 1*pi=180deg.")

   property("strafe_around", "bool", 0).
	doc("if it is true the strafe_angle will be ignored and the auv will strafe in a hole cycle around the buoy.") 

   property("cutting_wait_time", "int", 60).
	doc("time in seconds to wait in moving_to_cutting_distance before cutting.")

   property("z_offset", "double", 0).
	doc("the offset is permanently added to the z-command")

   port_driven 'input_buoy'

end

task_context "Detector" do
   # --------------------------------------------------------------------------
   # BUOY_DETECTED:   found a buoy within a sequence of frames
   # BUOY_LOST:       lost the buoy over a sequence of frames
   # --------------------------------------------------------------------------
   states("BUOY_FOUND", "NO_BUOY_FOUND")

   # --------------------------------------------------------------------------
   # I n p u t s 
   # --------------------------------------------------------------------------
   input_port("frame", ro_ptr("base::samples::frame::Frame")).
        doc("current frame given from a camera on which a buoy should be detected")

   # --------------------------------------------------------------------------
   # O u t p u t s
   # --------------------------------------------------------------------------
   output_port("buoy", "/avalon/feature/Buoy").
        doc("feature data of a buoy with the highest probability in frame")

   output_port("light", "bool").
        doc("sent true if a light has been detected onto a buoy")

   output_port("h_image", ro_ptr("base::samples::frame::Frame")).
		doc("only for debugging")

   output_port("s_image", ro_ptr("base::samples::frame::Frame")).
		doc("only for debugging")

   output_port("v_image", ro_ptr("base::samples::frame::Frame")).
		doc("only for debugging")
   output_port("binary_debug_image", ro_ptr("base::samples::frame::Frame")).
		doc("only for debugging")
   output_port("gray_debug_image", ro_ptr("base::samples::frame::Frame")).
		doc("only for debugging")

   output_port("hough_debug_image", ro_ptr("base::samples::frame::Frame")).
		doc("only for debugging")

   output_port("other_buoys","std::vector</avalon/feature/Buoy>").
		doc("only for debugging")

   output_port("debug_image", ro_ptr("base::samples::frame::Frame")).
		doc("the image which is shown in the light_image field in the debug-gui")

   # --------------------------------------------------------------------------
   # P r o p e r t i e s 
   # --------------------------------------------------------------------------

   property("buoy_radius", "double", 0.05).  #bei boye mit d=25cm ist wert von 0.05 realistisch. wieso?
        doc("radius of the buoy in m")
   #Properties for the Hough
   property("hHoughAccumulatorThreshold", "int", 25).
        doc("Hough threshold.")
   property("sHoughAccumulatorThreshold", "int", 25).
        doc("Hough threshold.")
   property("vHoughAccumulatorThreshold", "int", 25).
        doc("Hough threshold.")

   property("hHoughEdgeThreshold", "int", 25).
        doc("Hough threshold.")
   property("sHoughEdgeThreshold", "int", 25).
        doc("Hough threshold.")
   property("vHoughEdgeThreshold", "int", 25).
        doc("Hough threshold.")

   property("houghMinCircle", "int", 40).
        doc("Buoy hue value.")
   
   property("houghMaxCircle", "int", 55).
        doc("Buoy saturation value.")

   #Property for the HSV
   property("hValueMin", "int", 65).
        doc("Buoy hue value.")
   property("sValueMin", "int", 55).
        doc("Buoy saturation value.")
   property("vValueMin", "int", 40).
        doc("Buoy hue value.")
   

   property("hValueMax", "int", 65).
        doc("Buoy hue value.")
   property("vValueMax", "int", 40).
        doc("Buoy hue value.")
   property("sValueMax", "int", 55).
        doc("Buoy saturation value.")
   

   property("hSmooth", "int", 1)
   property("sSmooth", "int", 1)
   property("vSmooth", "int", 1)

   property("debug_gui", "bool", true).
        doc("Sets test mode.")

   property("buoy_timeout", "int", 20).
        doc("number of frames a buoy is not detected in order to set BUOY_LOST")

   property("filter_timeout", "double", 1.5).
        doc("the time in s how long a buoy of the past is noticed by the filter.")

   property("roi_x", "double", 0).
		doc("for light detection: relative region of interrest koordinate as factor of buoy-radius")

   property("roi_y", "double", 0.2).
		doc("for light detection: relative region of interrest koordinate as factor of buoy-radius")

   property("roi_width", "double", 3.0).
		doc("for light detection: retion of interrest width")

   property("roi_height", "double", 3.0).
		doc("for light detection: retion of interrest height")



   property("debug", "bool", 1).
		doc("debugging or not?")
   property("hsv_gray", "int", 0)
   property("hough_debug_h", "bool", 0)
   property("hough_debug_s", "bool", 0)
   property("hough_debug_v", "bool", 0)
            

   port_driven("frame")
end

task_context "ServoingOnWall" do 
    input_port("buoy_samples", "/avalon/feature/Buoy")
    input_port("wall_samples", "sonar_detectors::Wall")
    input_port 'orientation_samples', 'base::samples::RigidBodyState'

    output_port("world_cmd", "base::LinearAngular6DCommand")
    output_port("aligned_position_cmd", "base::LinearAngular6DCommand")

    states("BUOY_SERVOING", "PASSIVE_BUOY_SEARCHING")
    error_states("WAIT_FOR_BUOY_SAMPLE", "WAIT_FOR_WALL_SAMPLE", "WAIT_FOR_ORIENTATION_SAMPLE" )
    port_driven("buoy_samples")
end

deployment "buoy_test" do
  task "buoy_survey", "buoy::Survey"
  task "buoy_detector", "buoy::Detector"

  add_default_logger
end

